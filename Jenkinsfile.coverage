#!/usr/bin/env groovy

/*
 * Copyright (C) 2022 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

library 'canvas-builds-library'
loadLocalLibrary('local-lib', 'build/new-jenkins/library')

// if the build never starts or gets into a node block, then we
// can never load a file. and a very noisy/confusing error is thrown.
def ignoreBuildNeverStartedError(block) {
  try {
    block()
  }
  catch (org.jenkinsci.plugins.workflow.steps.MissingContextVariableException ex) {
    if (!ex.message.startsWith('Required context class hudson.FilePath is missing')) {
      throw ex
    }
    else {
      echo "ignored MissingContextVariableException: \n${ex.message}"
    }
    // we can ignore this very noisy error
  }
}

def getMigrationsTag(name) {
  (env.GERRIT_REFSPEC.contains('master')) || !migrations.cacheLoadFailed() ? migrations.imageMergeTag(name) : migrations.imagePatchsetTag(name)
}

def getPatchsetTag() {
  (env.GERRIT_REFSPEC.contains('master')) ? "${configuration.buildRegistryPath()}:${env.GERRIT_BRANCH}" : imageTag.patchset()
}

def getResultsHTMLUrl() {
  return "${env.BUILD_URL}/artifact/results.html"
}

def redisUrl() {
  return "redis://${TEST_QUEUE_HOST}:6379"
}

pipeline {
  agent { label 'canvas-docker' }
  options {
    ansiColor('xterm')
    timestamps()
  }

  environment {
    BUILD_REGISTRY_FQDN = configuration.buildRegistryFQDN()
    POSTGRES = configuration.postgres()
    RUBY = configuration.ruby() // RUBY_VERSION is a reserved keyword for ruby installs
    // e.g. canvas-lms:01.123456.78-postgres-12-ruby-2.6
    PATCHSET_TAG = getPatchsetTag()
    RSPECQ_REDIS_URL = redisUrl()

    CASSANDRA_PREFIX = configuration.buildRegistryPath('cassandra-migrations')
    DYNAMODB_PREFIX = configuration.buildRegistryPath('dynamodb-migrations')
    POSTGRES_PREFIX = configuration.buildRegistryPath('postgres-migrations')

    IMAGE_CACHE_MERGE_SCOPE = configuration.gerritBranchSanitized()
    RSPEC_PROCESSES = 6

    CASSANDRA_IMAGE_TAG = "$CASSANDRA_PREFIX:$IMAGE_CACHE_MERGE_SCOPE-$RSPEC_PROCESSES"
    DYNAMODB_IMAGE_TAG = "$DYNAMODB_PREFIX:$IMAGE_CACHE_MERGE_SCOPE-$RSPEC_PROCESSES"
    POSTGRES_IMAGE_TAG = "$POSTGRES_PREFIX:$IMAGE_CACHE_MERGE_SCOPE-$RSPEC_PROCESSES"
  }

  stages {
    stage('Setup') {
      steps {
        cleanAndSetup()
      }
    }

    stage('Parallel Run Tests') {
      steps {
        script {
          def stages = [:]

          distribution.stashBuildScripts()
          rspecStage.createDistribution(stages)

          parallel(stages)
        }
      }
    }
  }

  post {
    always {
      script {
        ignoreBuildNeverStartedError {
          node('master') {
            buildSummaryReport.publishReport('Build Summary Report', currentBuild.getResult() == 'SUCCESS' ? 'SUCCESS' : 'FAILURE')
          }
        }

        copyArtifacts(
          filter: 'tmp/coverage/**',
          optional: false,
          projectName: env.JOB_NAME,
          selector: specific(env.BUILD_NUMBER),
        )

        withEnv(['COMPOSE_FILE=docker-compose.new-jenkins.yml']) {
          sh """
            docker-compose run -v \$(pwd)/\$LOCAL_WORKDIR/tmp/coverage/:/tmp/coverage \
            --name coverage-collator canvas bash -c \
            "bundle install; bundle exec rake coverage:report['/tmp/coverage/canvas__*/**']"
          """

          sh 'docker cp coverage-collator:/usr/src/app/coverage/ coverage'

          archiveArtifacts allowEmptyArchive: true, artifacts: 'coverage/**'

          publishHTML target: [
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: true,
            reportDir: './coverage',
            reportFiles: 'index.html',
            reportName: 'Ruby Coverage Report'
          ]

          uploadCoverage([
            uploadSource: '/coverage',
            uploadDest: 'canvas-lms-rspec/coverage'
          ])
        }
      }
    }
    cleanup {
      script {
        ignoreBuildNeverStartedError {
          libraryScript.execute 'bash/docker-cleanup.sh --allow-failure'
        }
      }
    }
  }
}
