#!/usr/bin/env groovy

/*
 * Copyright (C) 2022 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

library "canvas-builds-library@${env.CANVAS_BUILDS_REFSPEC}"
loadLocalLibrary('local-lib', 'build/new-jenkins/library')

def setupNode() {
  sh 'rm -vrf ./tmp'

  checkout scm

  distribution.stashBuildScripts()
}

pipeline {
  agent none
  options {
    ansiColor('xterm')
    timeout(60)
    timestamps()
  }

  environment {
    COMPOSE_FILE = 'docker-compose.new-jenkins.yml:docker-compose.new-jenkins-js.yml'
    FORCE_FAILURE = configuration.forceFailureJS()

    TAG_SUFFIX = imageTag.suffix()
    IMAGE_CACHE_UNIQUE_SCOPE = "${imageTagVersion()}-$TAG_SUFFIX"
    KARMA_RUNNER_PREFIX = configuration.buildRegistryPath('karma-runner')
    KARMA_RUNNER_IMAGE = "$KARMA_RUNNER_PREFIX:$IMAGE_CACHE_UNIQUE_SCOPE"

    BUILD_REGISTRY_FQDN = configuration.buildRegistryFQDN()
    COMPOSE_DOCKER_CLI_BUILD = 1
    DOCKER_BUILDKIT = 1
    PROGRESS_NO_TRUNC = 1
  }

  stages {
    stage('Environment') {
      steps {
        script {
          def rspecNodeRequirements = [label: 'canvas-docker']

          def postBuildHandler = [
            onNodeReleasing: { stageName, stageConfig, result ->
              buildSummaryReport.saveRunManifest()

              copyArtifacts(
                filter: 'coverage-report-js/**',
                optional: false,
                projectName: env.JOB_NAME,
                selector: specific(env.BUILD_NUMBER),
              )

              withEnv(['COMPOSE_FILE=docker-compose.new-jenkins.yml']) {
                sh """
                  docker run --interactive \
                  --volume \$(pwd)/coverage-report-js:/usr/src/app/tmp/coverage-report-js \
                  --name coverage-collator \
                  $KARMA_RUNNER_IMAGE bash -c "./build/new-jenkins/js/coverage-report.sh"
                  """

                sh 'docker cp coverage-collator:/usr/src/app/report-html coverage-report-js/report-html'

                publishHTML target: [
                  allowMissing: false,
                  alwaysLinkToLastBuild: false,
                  keepAll: true,
                  reportDir: './coverage-report-js/report-html',
                  reportFiles: 'index.html',
                  reportName: 'Coverage Report'
                ]

                uploadCoverage([
                  uploadSource: '/coverage-report-js/report-html',
                  uploadDest: 'canvas-lms-js/coverage'
                ])
              }
            }
          ]

          extendedStage('Runner').obeysAllowStages(false).execute {
            extendedStage('Builder').hooks(postBuildHandler).obeysAllowStages(false).nodeRequirements(rspecNodeRequirements).execute {
              stage('Setup') {
                setupNode()
              }

              extendedStage('Parallel Run Tests').obeysAllowStages(false).execute { stageConfig, buildConfig ->
                def jsStages = [:]

                extendedStage('Runner - Jest').nodeRequirements(label: 'canvas-docker', podTemplate: jsStage.jestNodeRequirementsTemplate()).obeysAllowStages(false).timeout(10).queue(jsStages) {
                  def tests = [:]

                  callableWithDelegate(jsStage.queueJestDistribution())(tests)

                  parallel(tests)
                }

                extendedStage('Runner - Coffee').nodeRequirements(label: 'canvas-docker', podTemplate: jsStage.coffeeNodeRequirementsTemplate()).obeysAllowStages(false).timeout(10).queue(jsStages) {
                  def tests = [:]

                  callableWithDelegate(jsStage.queueCoffeeDistribution())(tests)

                  parallel(tests)
                }

                extendedStage('Runner - Karma').nodeRequirements(label: 'canvas-docker', podTemplate: jsStage.karmaNodeRequirementsTemplate()).obeysAllowStages(false).timeout(10).queue(jsStages) {
                  def tests = [:]

                  callableWithDelegate(jsStage.queueKarmaDistribution())(tests)

                  parallel(tests)
                }

                parallel(jsStages)
              } //parallel tests
            } //builder
          } //runner
        } //script
      } //steps
    } //environment
  } //stages
} //pipeline
