/*
 * Copyright (C) 2019 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

import AssignmentAlert from './AssignmentAlert'
import {
  AssignmentShape,
  CREATE_SUBMISSION,
  STUDENT_VIEW_QUERY,
  SubmissionShape
} from '../assignmentData'
import FileUpload from './FileUpload'
import I18n from 'i18n!assignments_2_content_upload_tab'
import LoadingIndicator from '../../shared/LoadingIndicator'
import {Mutation} from 'react-apollo'
import React, {Component} from 'react'

export default class ContentUploadTab extends Component {
  static propTypes = {
    assignment: AssignmentShape,
    submission: SubmissionShape
  }

  state = {
    submissionState: null
  }

  updateAssignmentCache = (cache, mutationResult) => {
    const {assignment} = cache.readQuery({
      query: STUDENT_VIEW_QUERY,
      variables: {
        assignmentLid: this.props.assignment._id
      }
    })

    // There are several important and unfortunate things to note here:
    //   1) SubmissionHistories do not have their own unique id. There is only
    //      ever one submission for a student, and on resubmission a snapshot
    //      of the current submission is saved and the data for the new submission
    //      replaces the old submission, but on the same row in the database.
    //   2) Because there is no unique id for submission histories, we are using
    //      the graphql cursor to keep track of the submission histories in our
    //      cache and determin which one should currently be displayed.
    //   3) The cursor is generated by the the ruby graphql gem, and it is
    //      actually just a base64 encoded index of where the item exists in
    //      an array.
    //
    // Combining all of these together means that whenever we do a mutation,
    // all of the existing cursors we currently have in our apollo cache are now
    // off by 1, and if unchecked would cause problems when going to next or
    // previous submissions after an assignment is submitted. To get around that,
    // we are wiping out our local cache of submission histories when we create
    // a new submission, instead of appending the new submission to our cache.
    const newHistories =
      mutationResult.data.createSubmission.submission.submissionHistoriesConnection
    assignment.submissionsConnection.nodes[0].submissionHistoriesConnection = newHistories

    cache.writeQuery({
      query: STUDENT_VIEW_QUERY,
      variables: {
        assignmentLid: this.props.assignment._id
      },
      data: {assignment}
    })
  }

  updateSubmissionState = state => {
    this.setState({submissionState: state})
  }

  renderErrorAlert = () => {
    return (
      <AssignmentAlert
        errorMessage={I18n.t('Error sending submission')}
        onDismiss={() => this.updateSubmissionState(null)}
      />
    )
  }

  renderSuccessAlert = () => {
    return <AssignmentAlert successMessage={I18n.t('Submission sent')} />
  }

  renderFileUpload = createSubmission => {
    switch (this.state.submissionState) {
      case 'error':
        return this.renderErrorAlert()
      case 'in-progress':
        return <LoadingIndicator />
      case 'success':
      default:
        return (
          <React.Fragment>
            {this.renderSuccessAlert()}
            <FileUpload
              assignment={this.props.assignment}
              createSubmission={createSubmission}
              submission={this.props.submission}
              updateSubmissionState={this.updateSubmissionState}
            />
          </React.Fragment>
        )
    }
  }

  render() {
    return (
      <Mutation
        mutation={CREATE_SUBMISSION}
        onCompleted={() => this.updateSubmissionState('success')}
        onError={() => this.updateSubmissionState('error')}
        update={this.updateAssignmentCache}
      >
        {this.renderFileUpload}
      </Mutation>
    )
  }
}
